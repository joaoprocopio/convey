// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listPropostas = `-- name: ListPropostas :many
SELECT
    p.id,
    p.status,
    p.name,
    u.id AS assignee_id,
    u.email AS assignee_email,
    pa.id AS attachment_id,
    pa.filename AS attachment_filename,
    pa.mimetype AS attachment_mimetype
FROM propostas AS p

LEFT JOIN users AS u
    ON p.assignee_id = u.id

LEFT JOIN proposta_attachments AS pa
    ON pa.proposta_id = p.id

WHERE
    p.id > $1

ORDER BY p.id
LIMIT $2
`

type ListPropostasParams struct {
	Cursor int32
	Limit  int32
}

type ListPropostasRow struct {
	ID                 int32
	Status             PropostaStatus
	Name               string
	AssigneeID         pgtype.Int4
	AssigneeEmail      pgtype.Text
	AttachmentID       pgtype.Int4
	AttachmentFilename pgtype.Text
	AttachmentMimetype pgtype.Text
}

func (q *Queries) ListPropostas(ctx context.Context, arg ListPropostasParams) ([]ListPropostasRow, error) {
	rows, err := q.db.Query(ctx, listPropostas, arg.Cursor, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPropostasRow
	for rows.Next() {
		var i ListPropostasRow
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.Name,
			&i.AssigneeID,
			&i.AssigneeEmail,
			&i.AttachmentID,
			&i.AttachmentFilename,
			&i.AttachmentMimetype,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
